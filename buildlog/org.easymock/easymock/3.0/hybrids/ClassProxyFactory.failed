hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:270: error: <identifier> expected
        enhancer.setSuperclass(toMock);
                              ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:270: error: <identifier> expected
        enhancer.setSuperclass(toMock);
                                     ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:274: error: illegal start of type
        if (toMock.getSigners() != null) {
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:274: error: <identifier> expected
        if (toMock.getSigners() != null) {
                             ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:274: error: ';' expected
        if (toMock.getSigners() != null) {
                               ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:279: error: illegal start of type
        return enhancer;
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:279: error: <identifier> expected
        return enhancer;
                       ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:282: error: class, interface, or enum expected
    private void updateMethod(final InvocationHandler objectMethodsFilter, final Method correctMethod) {
            ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:282: error: class, interface, or enum expected
    private void updateMethod(final InvocationHandler objectMethodsFilter, final Method correctMethod) {
                                    ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:282: error: class, interface, or enum expected
    private void updateMethod(final InvocationHandler objectMethodsFilter, final Method correctMethod) {
                                                                                 ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:283: error: class, interface, or enum expected
        final Field methodField = retrieveField(ObjectMethodsFilter.class, correctMethod.getName() + "Method");
              ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:283: error: <identifier> expected
        final Field methodField = retrieveField(ObjectMethodsFilter.class, correctMethod.getName() + "Method");
                                                                         ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:284: error: invalid method declaration; return type required
        updateField(objectMethodsFilter, correctMethod, methodField);
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:284: error: <identifier> expected
        updateField(objectMethodsFilter, correctMethod, methodField);
                                       ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:284: error: <identifier> expected
        updateField(objectMethodsFilter, correctMethod, methodField);
                                                      ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:284: error: <identifier> expected
        updateField(objectMethodsFilter, correctMethod, methodField);
                                                                   ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:287: error: class, interface, or enum expected
    private Field retrieveField(final Class<?> clazz, final String field) {
            ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:287: error: class, interface, or enum expected
    private Field retrieveField(final Class<?> clazz, final String field) {
                                      ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:287: error: class, interface, or enum expected
    private Field retrieveField(final Class<?> clazz, final String field) {
                                                            ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:290: error: class, interface, or enum expected
        } catch (final NoSuchFieldException e) {
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:290: error: class, interface, or enum expected
        } catch (final NoSuchFieldException e) {
                       ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:295: error: class, interface, or enum expected
        }
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:298: error: class, interface, or enum expected
    private void updateField(final Object instance, final Object value, final Field field) {
                                   ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:298: error: class, interface, or enum expected
    private void updateField(final Object instance, final Object value, final Field field) {
                                                          ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:298: error: class, interface, or enum expected
    private void updateField(final Object instance, final Object value, final Field field) {
                                                                              ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:299: error: class, interface, or enum expected
        final boolean accessible = field.isAccessible();
              ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:300: error: class, interface, or enum expected
        field.setAccessible(true);
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:301: error: class, interface, or enum expected
        try {
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:303: error: class, interface, or enum expected
        } catch (final IllegalAccessException e) {
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:303: error: class, interface, or enum expected
        } catch (final IllegalAccessException e) {
                       ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:307: error: class, interface, or enum expected
        }
        ^
hybrids/org.easymock/easymock/3.0/ClassProxyFactory.java:309: error: class, interface, or enum expected
    }
    ^
32 errors
