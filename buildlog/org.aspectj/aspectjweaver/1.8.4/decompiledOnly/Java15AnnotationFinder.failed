sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ObjectType.java:149: error: unmappable character (0xA7) for encoding UTF-8
	 * Java Virtual Machine Specification edition 2, � 5.4.4 Access Control
	                                                 ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/classfile/StackMap.java:66: error: unmappable character (0xA7) for encoding UTF-8
 * within the Code attribute of a method. See CLDC specification �5.3.1.2
                                                                 ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/classfile/StackMapEntry.java:64: error: unmappable character (0xA7) for encoding UTF-8
 * See CLDC specification �5.3.1.2
                          ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ReferenceType.java:140: error: unmappable character (0xA7) for encoding UTF-8
			 * If T is a class type, then T must be Object (�2.4.7).
			                                                ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ReferenceType.java:149: error: unmappable character (0xA7) for encoding UTF-8
			 * If T is an interface type, then T must be the same interface as this or a superinterface of this (�2.13.2).
			                                                                                                     ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ReferenceType.java:166: error: unmappable character (0xA7) for encoding UTF-8
			 * If T is a class type, then T must be Object (�2.4.7).
			                                                ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ReferenceType.java:179: error: unmappable character (0xA7) for encoding UTF-8
				 * TC and SC are the same primitive type (�2.4.1).
				                                          ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ReferenceType.java:189: error: unmappable character (0xA7) for encoding UTF-8
				 * TC and SC are reference types (�2.4.6), and type SC is assignable to TC by these runtime rules.
				                                  ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ReferenceType.java:197: error: unmappable character (0xA7) for encoding UTF-8
			/* If T is an interface type, T must be one of the interfaces implemented by arrays (�2.15). */
			                                                                                     ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ReferenceType.java:221: error: unmappable character (0xA7) for encoding UTF-8
	 * cannot be found, "null" is returned. See the JVM specification edition 2, "�4.9.2 The Bytecode Verifier".
	                                                                              ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/extractedSources/org/aspectj/apache/bcel/generic/ReferenceType.java:303: error: unmappable character (0xA7) for encoding UTF-8
	// * edition 2, "�4.9.2 The Bytecode Verifier".
	                 ^
sources/structure/org.aspectj/aspectjweaver/1.8.4/Decompiled/org/aspectj/weaver/reflect/Java15AnnotationFinder.java:52: error: incompatible types: Class<CAP#1> cannot be converted to Class<Object>
                return onObject.getClass().getAnnotation((Class<Object>)annotationClass);
                                                                        ^
  where CAP#1 is a fresh type-variable:
    CAP#1 extends Annotation from capture of ? extends Annotation
sources/structure/org.aspectj/aspectjweaver/1.8.4/Decompiled/org/aspectj/weaver/reflect/Java15AnnotationFinder.java:78: error: method getAnnotation in class AccessibleObject cannot be applied to given types;
                return ao.getAnnotation((Class<Object>)annotationClass);
                         ^
  required: Class<T>
  found: Class<Object>
  reason: inference variable T has incompatible bounds
    equality constraints: Object
    lower bounds: Annotation
  where T is a type-variable:
    T extends Annotation declared in method <T>getAnnotation(Class<T>)
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
13 errors
