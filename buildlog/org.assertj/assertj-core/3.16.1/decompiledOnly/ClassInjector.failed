sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:16: error: package org.assertj.core.internal.bytebuddy.description.type does not exist
import org.assertj.core.internal.bytebuddy.description.type.PackageDescription;
                                                           ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:18: error: cannot find symbol
import org.assertj.core.internal.bytebuddy.utility.JavaType;
                                                  ^
  symbol:   class JavaType
  location: package org.assertj.core.internal.bytebuddy.utility
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:19: error: package org.assertj.core.internal.bytebuddy.asm does not exist
import org.assertj.core.internal.bytebuddy.asm.AsmVisitorWrapper;
                                              ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:20: error: package org.assertj.core.internal.bytebuddy.description.method does not exist
import org.assertj.core.internal.bytebuddy.description.method.MethodDescription;
                                                             ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:21: error: package org.assertj.core.internal.bytebuddy.matcher does not exist
import org.assertj.core.internal.bytebuddy.matcher.ElementMatcher;
                                                  ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:22: error: package org.assertj.core.internal.bytebuddy.matcher does not exist
import org.assertj.core.internal.bytebuddy.matcher.ElementMatchers;
                                                  ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:23: error: package org.assertj.core.internal.bytebuddy.asm does not exist
import org.assertj.core.internal.bytebuddy.asm.MemberRemoval;
                                              ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:25: error: cannot find symbol
import org.assertj.core.internal.bytebuddy.dynamic.DynamicType;
                                                  ^
  symbol:   class DynamicType
  location: package org.assertj.core.internal.bytebuddy.dynamic
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:27: error: package org.assertj.core.internal.bytebuddy.implementation does not exist
import org.assertj.core.internal.bytebuddy.implementation.FixedValue;
                                                         ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:28: error: package org.assertj.core.internal.bytebuddy.implementation does not exist
import org.assertj.core.internal.bytebuddy.implementation.Implementation;
                                                         ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:29: error: package org.assertj.core.internal.bytebuddy.implementation does not exist
import org.assertj.core.internal.bytebuddy.implementation.MethodCall;
                                                         ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:31: error: package org.assertj.core.internal.bytebuddy.description.modifier does not exist
import org.assertj.core.internal.bytebuddy.description.modifier.Visibility;
                                                               ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:32: error: package org.assertj.core.internal.bytebuddy.description.modifier does not exist
import org.assertj.core.internal.bytebuddy.description.modifier.ModifierContributor;
                                                               ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:34: error: package org.assertj.core.internal.bytebuddy.dynamic.scaffold.subclass does not exist
import org.assertj.core.internal.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategy;
                                                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:36: error: cannot find symbol
import org.assertj.core.internal.bytebuddy.ByteBuddy;
                                          ^
  symbol:   class ByteBuddy
  location: package org.assertj.core.internal.bytebuddy
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:38: error: package edu.umd.cs.findbugs.annotations does not exist
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
                                      ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:40: error: cannot find symbol
import org.assertj.core.internal.bytebuddy.utility.JavaModule;
                                                  ^
  symbol:   class JavaModule
  location: package org.assertj.core.internal.bytebuddy.utility
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:46: error: package org.assertj.core.internal.bytebuddy.build does not exist
import org.assertj.core.internal.bytebuddy.build.HashCodeAndEqualsPlugin;
                                                ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:50: error: package org.assertj.core.internal.bytebuddy.description.type does not exist
import org.assertj.core.internal.bytebuddy.description.type.TypeDescription;
                                                           ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:61: error: cannot find symbol
    Map<TypeDescription, Class<?>> inject(final Map<? extends TypeDescription, byte[]> p0);
                                                              ^
  symbol:   class TypeDescription
  location: interface ClassInjector
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:61: error: cannot find symbol
    Map<TypeDescription, Class<?>> inject(final Map<? extends TypeDescription, byte[]> p0);
        ^
  symbol:   class TypeDescription
  location: interface ClassInjector
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:67: error: cannot find symbol
        public Map<TypeDescription, Class<?>> inject(final Map<? extends TypeDescription, byte[]> types) {
                                                                         ^
  symbol:   class TypeDescription
  location: class AbstractBase
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:67: error: cannot find symbol
        public Map<TypeDescription, Class<?>> inject(final Map<? extends TypeDescription, byte[]> types) {
                   ^
  symbol:   class TypeDescription
  location: class AbstractBase
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:81: error: package HashCodeAndEqualsPlugin does not exist
    @HashCodeAndEqualsPlugin.Enhance
                            ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:84: error: cannot find symbol
        private static final Initializable DISPATCHER;
                             ^
  symbol:   class Initializable
  location: class UsingReflection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:88: error: cannot find symbol
        private final PackageDefinitionStrategy packageDefinitionStrategy;
                      ^
  symbol:   class PackageDefinitionStrategy
  location: class UsingReflection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:99: error: cannot find symbol
        public UsingReflection(final ClassLoader classLoader, final ProtectionDomain protectionDomain, final PackageDefinitionStrategy packageDefinitionStrategy, final boolean forbidExisting) {
                                                                                                             ^
  symbol:   class PackageDefinitionStrategy
  location: class UsingReflection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:237: error: package HashCodeAndEqualsPlugin does not exist
            @HashCodeAndEqualsPlugin.Enhance
                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:359: error: package HashCodeAndEqualsPlugin does not exist
                @HashCodeAndEqualsPlugin.Enhance
                                        ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:404: error: package HashCodeAndEqualsPlugin does not exist
            @HashCodeAndEqualsPlugin.Enhance
                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:671: error: package HashCodeAndEqualsPlugin does not exist
                @HashCodeAndEqualsPlugin.Enhance
                                        ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:716: error: package HashCodeAndEqualsPlugin does not exist
            @HashCodeAndEqualsPlugin.Enhance
                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:767: error: package HashCodeAndEqualsPlugin does not exist
                @HashCodeAndEqualsPlugin.Enhance
                                        ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:823: error: package HashCodeAndEqualsPlugin does not exist
    @HashCodeAndEqualsPlugin.Enhance
                            ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:943: error: package HashCodeAndEqualsPlugin does not exist
            @HashCodeAndEqualsPlugin.Enhance
                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1028: error: package HashCodeAndEqualsPlugin does not exist
    @HashCodeAndEqualsPlugin.Enhance
                            ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1158: error: package HashCodeAndEqualsPlugin does not exist
        @HashCodeAndEqualsPlugin.Enhance
                                ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1315: error: package HashCodeAndEqualsPlugin does not exist
            @HashCodeAndEqualsPlugin.Enhance
                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1366: error: package HashCodeAndEqualsPlugin does not exist
            @HashCodeAndEqualsPlugin.Enhance
                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1407: error: package HashCodeAndEqualsPlugin does not exist
    @HashCodeAndEqualsPlugin.Enhance
                            ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1566: error: package HashCodeAndEqualsPlugin does not exist
            @HashCodeAndEqualsPlugin.Enhance
                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:86: error: package HashCodeAndEqualsPlugin does not exist
        @HashCodeAndEqualsPlugin.ValueHandling(HashCodeAndEqualsPlugin.ValueHandling.Sort.REVERSE_NULLABILITY)
                                ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:86: error: package HashCodeAndEqualsPlugin.ValueHandling does not exist
        @HashCodeAndEqualsPlugin.ValueHandling(HashCodeAndEqualsPlugin.ValueHandling.Sort.REVERSE_NULLABILITY)
                                                                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:220: error: cannot find symbol
                @SuppressFBWarnings(value = { "REC_CATCH_EXCEPTION" }, justification = "Exception should not be rethrown but trigger a fallback")
                 ^
  symbol:   class SuppressFBWarnings
  location: class CreationAction
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:252: error: cannot find symbol
                @SuppressFBWarnings(value = { "DP_DO_INSIDE_DO_PRIVILEGED" }, justification = "Privilege is explicit caller responsibility")
                 ^
  symbol:   class SuppressFBWarnings
  location: class Direct
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:423: error: cannot find symbol
                @SuppressFBWarnings(value = { "DP_DO_INSIDE_DO_PRIVILEGED" }, justification = "Privilege is explicit caller responsibility")
                 ^
  symbol:   class SuppressFBWarnings
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:558: error: cannot find symbol
                @SuppressFBWarnings(value = { "DP_DO_INSIDE_DO_PRIVILEGED" }, justification = "Privilege is explicit caller responsibility")
                 ^
  symbol:   class SuppressFBWarnings
  location: class UsingUnsafeOverride
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:906: error: cannot find symbol
                @SuppressFBWarnings(value = { "REC_CATCH_EXCEPTION" }, justification = "Exception should not be rethrown but trigger a fallback")
                 ^
  symbol:   class SuppressFBWarnings
  location: class Creator
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1034: error: package HashCodeAndEqualsPlugin does not exist
        @HashCodeAndEqualsPlugin.ValueHandling(HashCodeAndEqualsPlugin.ValueHandling.Sort.REVERSE_NULLABILITY)
                                ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1034: error: package HashCodeAndEqualsPlugin.ValueHandling does not exist
        @HashCodeAndEqualsPlugin.ValueHandling(HashCodeAndEqualsPlugin.ValueHandling.Sort.REVERSE_NULLABILITY)
                                                                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1036: error: package HashCodeAndEqualsPlugin does not exist
        @HashCodeAndEqualsPlugin.ValueHandling(HashCodeAndEqualsPlugin.ValueHandling.Sort.REVERSE_NULLABILITY)
                                ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1036: error: package HashCodeAndEqualsPlugin.ValueHandling does not exist
        @HashCodeAndEqualsPlugin.ValueHandling(HashCodeAndEqualsPlugin.ValueHandling.Sort.REVERSE_NULLABILITY)
                                                                                    ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1167: error: cannot find symbol
            @SuppressFBWarnings(value = { "REC_CATCH_EXCEPTION" }, justification = "Exception is captured to trigger lazy error upon use.")
             ^
  symbol:   class SuppressFBWarnings
  location: class Factory
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1198: error: cannot find symbol
            @SuppressFBWarnings(value = { "REC_CATCH_EXCEPTION" }, justification = "Exception intends to trigger disabled injection strategy.")
             ^
  symbol:   class SuppressFBWarnings
  location: class Factory
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1271: error: cannot find symbol
                @SuppressFBWarnings(value = { "REC_CATCH_EXCEPTION" }, justification = "Exception should not be rethrown but trigger a fallback")
                 ^
  symbol:   class SuppressFBWarnings
  location: class CreationAction
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:69: error: cannot find symbol
            for (final Map.Entry<? extends TypeDescription, byte[]> entry : types.entrySet()) {
                                           ^
  symbol:   class TypeDescription
  location: class AbstractBase
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:70: error: cannot find symbol
                binaryRepresentations.put(((TypeDescription)entry.getKey()).getName(), entry.getValue());
                                            ^
  symbol:   class TypeDescription
  location: class AbstractBase
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:73: error: cannot find symbol
            final Map<TypeDescription, Class<?>> result = new LinkedHashMap<TypeDescription, Class<?>>();
                      ^
  symbol:   class TypeDescription
  location: class AbstractBase
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:73: error: cannot find symbol
            final Map<TypeDescription, Class<?>> result = new LinkedHashMap<TypeDescription, Class<?>>();
                                                                            ^
  symbol:   class TypeDescription
  location: class AbstractBase
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:74: error: cannot find symbol
            for (final TypeDescription typeDescription : types.keySet()) {
                       ^
  symbol:   class TypeDescription
  location: class AbstractBase
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:92: error: cannot find symbol
            this(classLoader, ClassLoadingStrategy.NO_PROTECTION_DOMAIN);
                              ^
  symbol:   variable ClassLoadingStrategy
  location: class UsingReflection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:96: error: package PackageDefinitionStrategy does not exist
            this(classLoader, protectionDomain, PackageDefinitionStrategy.Trivial.INSTANCE, false);
                                                                         ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:123: error: package PackageDefinitionStrategy does not exist
                            final PackageDefinitionStrategy.Definition definition = this.packageDefinitionStrategy.define(this.classLoader, packageName, (String)entry.getKey());
                                                           ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:154: error: cannot find symbol
            DISPATCHER = AccessController.doPrivileged((PrivilegedAction<Initializable>)Dispatcher.CreationAction.INSTANCE);
                                                                         ^
  symbol:   class Initializable
  location: class UsingReflection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:223: error: cannot find symbol
                        if (JavaModule.isSupported()) {
                            ^
  symbol:   variable JavaModule
  location: class CreationAction
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:255: error: cannot find symbol
                    if (JavaModule.isSupported()) {
                        ^
  symbol:   variable JavaModule
  location: class Direct
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:433: error: cannot find symbol
                    if (JavaModule.isSupported()) {
                        ^
  symbol:   variable JavaModule
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: package DynamicType does not exist
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));
                               ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));

  symbol:   variable Visibility
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));

  symbol:   variable Visibility
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));

  symbol:   variable Visibility
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));
                                                                                                                                                                                                                                                                                                    ^
  symbol:   variable Visibility
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: package ConstructorStrategy does not exist
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));
                                                                                                                                             ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));
                                                         ^
  symbol:   class ByteBuddy
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));
                                                                                                                                                                                                                                                                                                                                                                                 ^
  symbol:   variable MethodCall
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));

  symbol:   variable MethodCall
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));

  symbol:   variable MethodCall
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:445: error: cannot find symbol
                    DynamicType.Builder<?> builder = new ByteBuddy().with(TypeValidation.DISABLED).subclass(Object.class, ConstructorStrategy.Default.NO_CONSTRUCTORS).name(ClassLoader.class.getName() + "$ByteBuddyAccessor$" + RandomString.make()).defineMethod("findLoadedClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class)).onArgument(0).withArgument(1)).defineMethod("defineClass", Class.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class)).onArgument(0).withArgument(1, 2, 3, 4, 5)).defineMethod("getPackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(getPackage).onArgument(0).withArgument(1)).defineMethod("definePackage", Package.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("definePackage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, URL.class)).onArgument(0).withArgument(1, 2, 3, 4, 5, 6, 7, 8));

  symbol:   variable MethodCall
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:447: error: cannot find symbol
                        builder = builder.defineMethod("getClassLoadingLock", Object.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("getClassLoadingLock", String.class)).onArgument(0).withArgument(1));
                                                                                            ^
  symbol:   variable Visibility
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:447: error: cannot find symbol
                        builder = builder.defineMethod("getClassLoadingLock", Object.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(MethodCall.invoke(ClassLoader.class.getDeclaredMethod("getClassLoadingLock", String.class)).onArgument(0).withArgument(1));
                                                                                                                                                                         ^
  symbol:   variable MethodCall
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:450: error: cannot find symbol
                        builder = builder.defineMethod("getClassLoadingLock", Object.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(FixedValue.argument(0));
                                                                                            ^
  symbol:   variable Visibility
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:450: error: cannot find symbol
                        builder = builder.defineMethod("getClassLoadingLock", Object.class, Visibility.PUBLIC).withParameters(ClassLoader.class, String.class).intercept(FixedValue.argument(0));
                                                                                                                                                                         ^
  symbol:   variable FixedValue
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:452: error: cannot find symbol
                    final Class<?> type = builder.make().load(ClassLoadingStrategy.BOOTSTRAP_LOADER, new ClassLoadingStrategy.ForUnsafeInjection()).getLoaded();
                                                              ^
  symbol:   variable ClassLoadingStrategy
  location: class UsingUnsafeInjection
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:452: error: package ClassLoadingStrategy does not exist
                    final Class<?> type = builder.make().load(ClassLoadingStrategy.BOOTSTRAP_LOADER, new ClassLoadingStrategy.ForUnsafeInjection()).getLoaded();
                                                                                                                             ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:572: error: package ClassLoadingStrategy does not exist
                        override = new ByteBuddy().redefine(AccessibleObject.class).name("org.assertj.core.internal.bytebuddy.mirror." + AccessibleObject.class.getSimpleName()).noNestMate().visit(new MemberRemoval().stripInvokables(ElementMatchers.any())).make().load(AccessibleObject.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredField("override");
                                                                                                                                                                                                                                                                                                                                         ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:572: error: cannot find symbol
                        override = new ByteBuddy().redefine(AccessibleObject.class).name("org.assertj.core.internal.bytebuddy.mirror." + AccessibleObject.class.getSimpleName()).noNestMate().visit(new MemberRemoval().stripInvokables(ElementMatchers.any())).make().load(AccessibleObject.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredField("override");
                                       ^
  symbol:   class ByteBuddy
  location: class UsingUnsafeOverride
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:572: error: cannot find symbol
                        override = new ByteBuddy().redefine(AccessibleObject.class).name("org.assertj.core.internal.bytebuddy.mirror." + AccessibleObject.class.getSimpleName()).noNestMate().visit(new MemberRemoval().stripInvokables(ElementMatchers.any())).make().load(AccessibleObject.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredField("override");
                                                                                                                                                                                                        ^
  symbol:   class MemberRemoval
  location: class UsingUnsafeOverride
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:572: error: cannot find symbol
                        override = new ByteBuddy().redefine(AccessibleObject.class).name("org.assertj.core.internal.bytebuddy.mirror." + AccessibleObject.class.getSimpleName()).noNestMate().visit(new MemberRemoval().stripInvokables(ElementMatchers.any())).make().load(AccessibleObject.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredField("override");
                                                                                                                                                                                                                                        ^
  symbol:   variable ElementMatchers
  location: class UsingUnsafeOverride
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:577: error: cannot find symbol
                    if (JavaModule.isSupported()) {
                        ^
  symbol:   variable JavaModule
  location: class UsingUnsafeOverride
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:793: error: reference to Unavailable is ambiguous
                            return (Class<?>)Unavailable.UNDEFINED;
                                             ^
  both class org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector.UsingReflection.Dispatcher.Unavailable in Dispatcher and class org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector.UsingReflection.Dispatcher.Initializable.Unavailable in Initializable match
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:811: error: reference to Unavailable is ambiguous
                        return this == o || (o != null && this.getClass() == o.getClass() && this.message.equals(((Unavailable)o).message));
                                                                                                                   ^
  both class org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector.UsingReflection.Dispatcher.Unavailable in Dispatcher and class org.assertj.core.internal.bytebuddy.dynamic.loading.ClassInjector.UsingReflection.Dispatcher.Initializable.Unavailable in Initializable match
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:838: error: package JavaType does not exist
            if (!JavaType.METHOD_HANDLES_LOOKUP.isInstance(lookup)) {
                         ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:860: error: package TypeDescription does not exist
            final String expectedPackage = TypeDescription.ForLoadedType.of(this.lookupType()).getPackage().getName();
                                                          ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:909: error: package JavaType does not exist
                        final Class<?> lookup = JavaType.METHOD_HANDLES_LOOKUP.load();
                                                        ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:910: error: package JavaType does not exist
                        return new ForJava9CapableVm(JavaType.METHOD_HANDLES.load().getMethod("privateLookupIn", Class.class, lookup), lookup.getMethod("lookupClass", (Class<?>[])new Class[0]), lookup.getMethod("lookupModes", (Class<?>[])new Class[0]), lookup.getMethod("defineClass", byte[].class));
                                                             ^
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1041: error: cannot find symbol
            this(classLoader, ClassLoadingStrategy.NO_PROTECTION_DOMAIN);
                              ^
  symbol:   variable ClassLoadingStrategy
  location: class UsingUnsafe
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1088: error: cannot find symbol
            return new UsingUnsafe(ClassLoadingStrategy.BOOTSTRAP_LOADER);
                                   ^
  symbol:   variable ClassLoadingStrategy
  location: class UsingUnsafe
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1200: error: cannot find symbol
                if (UsingUnsafe.isAvailable() || !JavaModule.isSupported()) {
                                                  ^
  symbol:   variable JavaModule
  location: class Factory
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1205: error: cannot find symbol
                    final PackageDescription packageDescription = new PackageDescription.ForLoadedPackage(type.getPackage());
                          ^
  symbol:   class PackageDescription
  location: class Factory
sources/structure/org.assertj/assertj-core/3.16.1/Decompiled/org/assertj/core/internal/bytebuddy/dynamic/loading/ClassInjector.java:1205: error: package PackageDescription does not exist
                    final PackageDescription packageDescription = new PackageDescription.ForLoadedPackage(type.getPackage());
                                                                                        ^
100 errors
